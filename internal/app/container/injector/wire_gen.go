// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"github.com/ingot-cloud/ingot-go/internal/app/api"
	"github.com/ingot-cloud/ingot-go/internal/app/config"
	"github.com/ingot-cloud/ingot-go/internal/app/container/provider"
	"github.com/ingot-cloud/ingot-go/internal/app/container/provider/factory"
	"github.com/ingot-cloud/ingot-go/internal/app/core/http"
	config2 "github.com/ingot-cloud/ingot-go/internal/app/core/security/config"
	"github.com/ingot-cloud/ingot-go/internal/app/core/security/service"
	"github.com/ingot-cloud/ingot-go/internal/app/core/security/token"
	dao2 "github.com/ingot-cloud/ingot-go/internal/app/model/dao"
	"github.com/ingot-cloud/ingot-go/internal/app/service/impl"
	container2 "github.com/ingot-cloud/ingot-go/pkg/framework/boot/container"
	"github.com/ingot-cloud/ingot-go/pkg/framework/security/authentication/provider/dao"
	"github.com/ingot-cloud/ingot-go/pkg/framework/security/container"
	provider2 "github.com/ingot-cloud/ingot-go/pkg/framework/security/container/provider"
	"github.com/ingot-cloud/ingot-go/pkg/framework/security/container/provider/pre"
)

// Injectors from app.go:

func BuildConfiguration(options *config.Options) (*config.Config, error) {
	configConfig, err := provider.NewConfig(options)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func BuildContainerCombine(config3 *config.Config, options *config.Options) (container.SecurityContainerCombine, func(), error) {
	webSecurityConfigurersImpl := &pre.WebSecurityConfigurersImpl{}
	encoder := pre.PasswordEncoder()
	userCache := pre.UserCache()
	preChecker := pre.PreChecker()
	postChecker := pre.PostChecker()
	userdetailsService := pre.UserDetailsService()
	clientdetailsService := pre.ClientDetailsService()
	commonContainer := &container.CommonContainer{
		WebSecurityConfigurers: webSecurityConfigurersImpl,
		PasswordEncoder:        encoder,
		UserCache:              userCache,
		PreChecker:             preChecker,
		PostChecker:            postChecker,
		UserDetailsService:     userdetailsService,
		ClientDetailsService:   clientdetailsService,
	}
	oAuth2, err := factory.OAuth2Config(config3)
	if err != nil {
		return nil, nil, err
	}
	userAuthenticationConverter := pre.UserAuthenticationConverter()
	accessTokenConverter := pre.AccessTokenConverter(oAuth2, userAuthenticationConverter)
	jwtAccessTokenConverter := pre.JwtAccessTokenConverter(oAuth2, accessTokenConverter)
	store := pre.TokenStore(jwtAccessTokenConverter)
	oAuth2Container := &container.OAuth2Container{
		OAuth2Config:                oAuth2,
		TokenStore:                  store,
		JwtAccessTokenConverter:     jwtAccessTokenConverter,
		AccessTokenConverter:        accessTokenConverter,
		UserAuthenticationConverter: userAuthenticationConverter,
	}
	resourceServerTokenServices := pre.ResourceServerTokenServices(store)
	resourceManager := pre.ResourceAuthenticationManager(oAuth2, resourceServerTokenServices)
	tokenExtractor := pre.TokenExtractor()
	resourceServerConfigurer := pre.ResourceServerConfigurer(tokenExtractor, resourceManager)
	resourceServerContainer := &container.ResourceServerContainer{
		AuthenticationManager:       resourceManager,
		ResourceServerConfigurer:    resourceServerConfigurer,
		ResourceServerTokenServices: resourceServerTokenServices,
		TokenExtractor:              tokenExtractor,
	}
	authenticationProvider := pre.BasicAuthenticationProvider(commonContainer)
	daoAuthenticationProvider := &dao.AuthenticationProvider{
		PasswordEncoder:          encoder,
		UserDetailsService:       userdetailsService,
		UserCache:                userCache,
		PreAuthenticationChecks:  preChecker,
		PostAuthenticationChecks: postChecker,
	}
	providersImpl := &pre.ProvidersImpl{
		Basic: authenticationProvider,
		Dao:   daoAuthenticationProvider,
	}
	authProvidersContainer := &container.AuthProvidersContainer{
		Providers: providersImpl,
	}
	authorizationManager := pre.AuthorizationAuthenticationManager(authProvidersContainer)
	authorizationServerConfigurer := pre.AuthorizationServerConfigurer(authorizationManager)
	enhancer := pre.TokenEnhancer(oAuth2Container)
	authorizationServerTokenServices := pre.AuthorizationServerTokenServices(oAuth2, store, commonContainer, enhancer, authorizationManager)
	consumerTokenServices := pre.ConsumerTokenServices(store)
	passwordTokenGranter := pre.PasswordTokenGranter(authorizationServerTokenServices, authorizationManager)
	granter := pre.TokenGranter(passwordTokenGranter)
	tokenEndpoint := pre.TokenEndpoint(granter, commonContainer)
	oAuth2HTTPConfigurer := pre.TokenEndpointHTTPConfigurer(tokenEndpoint)
	authorizationServerContainer := &container.AuthorizationServerContainer{
		AuthenticationManager:            authorizationManager,
		AuthorizationServerConfigurer:    authorizationServerConfigurer,
		AuthorizationServerTokenServices: authorizationServerTokenServices,
		ConsumerTokenServices:            consumerTokenServices,
		TokenEndpoint:                    tokenEndpoint,
		TokenEndpointHTTPConfigurer:      oAuth2HTTPConfigurer,
		TokenEnhancer:                    enhancer,
		TokenGranter:                     granter,
		PasswordTokenGranter:             passwordTokenGranter,
	}
	securityContainerImpl := &container.SecurityContainerImpl{
		CommonContainer:              commonContainer,
		OAuth2Container:              oAuth2Container,
		ResourceServerContainer:      resourceServerContainer,
		AuthorizationServerContainer: authorizationServerContainer,
		AuthProvidersContainer:       authProvidersContainer,
	}
	nilSecurityInjector := &container.NilSecurityInjector{}
	security, err := factory.SecurityConfig(config3)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := factory.NewGorm(config3)
	if err != nil {
		return nil, nil, err
	}
	oauthClientDetails := &dao2.OauthClientDetails{
		DB: db,
	}
	clientDetails := &service.ClientDetails{
		OauthClientDetailsDao: oauthClientDetails,
	}
	userDetail := &impl.UserDetail{}
	userDetails := &service.UserDetails{
		UserDetailService: userDetail,
	}
	requestMatcher := provider.PermitURLMatcher(security)
	resourceServerAdapter := provider.ResourceServerAdapter(tokenExtractor, resourceManager, requestMatcher)
	ingotEnhancer := &token.IngotEnhancer{}
	ingotUserAuthenticationConverter := &token.IngotUserAuthenticationConverter{}
	ingotSecurityInjector := &config2.IngotSecurityInjector{
		NilSecurityInjector:              nilSecurityInjector,
		JwtAccessTokenConverter:          jwtAccessTokenConverter,
		SecurityConfig:                   security,
		ClientDetailsService:             clientDetails,
		UserDetailsService:               userDetails,
		ResourceServerAdapter:            resourceServerAdapter,
		IngotEnhancer:                    ingotEnhancer,
		IngotUserAuthenticationConverter: ingotUserAuthenticationConverter,
	}
	securityContainerProxyImpl := &container.SecurityContainerProxyImpl{
		SecurityContainer: securityContainerImpl,
		SecurityInjector:  ingotSecurityInjector,
	}
	securityContainerCombine := pre.InjectCustomInstance(securityContainerProxyImpl)
	return securityContainerCombine, func() {
		cleanup()
	}, nil
}

func BuildContainer(config3 *config.Config, options *config.Options, combine container.SecurityContainerCombine) (container2.Container, func(), error) {
	httpConfig, err := factory.HTTPConfig(config3)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup, err := factory.NewGorm(config3)
	if err != nil {
		return nil, nil, err
	}
	role := &dao2.Role{
		DB: db,
	}
	roleAuthority := &dao2.RoleAuthority{
		DB: db,
	}
	authority := &dao2.Authority{
		DB: db,
	}
	user := &dao2.User{
		DB: db,
	}
	roleUser := &dao2.RoleUser{
		DB: db,
	}
	permission := &impl.Permission{
		RoleDao:          role,
		RoleAuthorityDao: roleAuthority,
		AuthorityDao:     authority,
		UserDao:          user,
		RoleUserDao:      roleUser,
	}
	casbinAdapterService := &impl.CasbinAdapterService{
		PermissionService: permission,
	}
	syncedEnforcer, cleanup2, err := factory.NewCasbin(options, casbinAdapterService)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	security, err := factory.SecurityConfig(config3)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	test := &api.Test{}
	apiConfig := &http.APIConfig{
		CasbinEnforcer: syncedEnforcer,
		SecurityConfig: security,
		TestAPI:        test,
	}
	webSecurityConfigurersImpl := &provider2.WebSecurityConfigurersImpl{
		SC: combine,
	}
	encoder := provider2.PasswordEncoder(combine)
	userCache := provider2.UserCache(combine)
	preChecker := provider2.PreChecker(combine)
	postChecker := provider2.PostChecker(combine)
	userdetailsService := provider2.UserDetailsService(combine)
	clientdetailsService := provider2.ClientDetailsService(combine)
	commonContainer := &container.CommonContainer{
		WebSecurityConfigurers: webSecurityConfigurersImpl,
		PasswordEncoder:        encoder,
		UserCache:              userCache,
		PreChecker:             preChecker,
		PostChecker:            postChecker,
		UserDetailsService:     userdetailsService,
		ClientDetailsService:   clientdetailsService,
	}
	oAuth2, err := factory.OAuth2Config(config3)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	store := provider2.TokenStore(combine)
	jwtAccessTokenConverter := provider2.JwtAccessTokenConverter(combine)
	accessTokenConverter := provider2.AccessTokenConverter(combine)
	userAuthenticationConverter := provider2.UserAuthenticationConverter(combine)
	oAuth2Container := &container.OAuth2Container{
		OAuth2Config:                oAuth2,
		TokenStore:                  store,
		JwtAccessTokenConverter:     jwtAccessTokenConverter,
		AccessTokenConverter:        accessTokenConverter,
		UserAuthenticationConverter: userAuthenticationConverter,
	}
	resourceManager := provider2.ResourceAuthenticationManager(combine)
	resourceServerConfigurer := provider2.ResourceServerConfigurer(combine)
	resourceServerTokenServices := provider2.ResourceServerTokenServices(combine)
	tokenExtractor := provider2.TokenExtractor(combine)
	resourceServerContainer := &container.ResourceServerContainer{
		AuthenticationManager:       resourceManager,
		ResourceServerConfigurer:    resourceServerConfigurer,
		ResourceServerTokenServices: resourceServerTokenServices,
		TokenExtractor:              tokenExtractor,
	}
	authorizationManager := provider2.AuthorizationAuthenticationManager(combine)
	authorizationServerConfigurer := provider2.AuthorizationServerConfigurer(combine)
	authorizationServerTokenServices := provider2.AuthorizationServerTokenServices(combine)
	consumerTokenServices := provider2.ConsumerTokenServices(combine)
	tokenEndpoint := provider2.TokenEndpoint(combine)
	oAuth2HTTPConfigurer := provider2.TokenEndpointHTTPConfigurer(combine)
	enhancer := provider2.TokenEnhancer(combine)
	granter := provider2.TokenGranter(combine)
	passwordTokenGranter := provider2.PasswordTokenGranter(combine)
	authorizationServerContainer := &container.AuthorizationServerContainer{
		AuthenticationManager:            authorizationManager,
		AuthorizationServerConfigurer:    authorizationServerConfigurer,
		AuthorizationServerTokenServices: authorizationServerTokenServices,
		ConsumerTokenServices:            consumerTokenServices,
		TokenEndpoint:                    tokenEndpoint,
		TokenEndpointHTTPConfigurer:      oAuth2HTTPConfigurer,
		TokenEnhancer:                    enhancer,
		TokenGranter:                     granter,
		PasswordTokenGranter:             passwordTokenGranter,
	}
	providersImpl := &provider2.ProvidersImpl{
		SC: combine,
	}
	authProvidersContainer := &container.AuthProvidersContainer{
		Providers: providersImpl,
	}
	securityContainerImpl := &container.SecurityContainerImpl{
		CommonContainer:              commonContainer,
		OAuth2Container:              oAuth2Container,
		ResourceServerContainer:      resourceServerContainer,
		AuthorizationServerContainer: authorizationServerContainer,
		AuthProvidersContainer:       authProvidersContainer,
	}
	printSecurityInjector := provider2.PrintInjectInstance(securityContainerImpl)
	defaultContainer := &container2.DefaultContainer{
		HTTPConfig:         httpConfig,
		HTTPConfigurer:     apiConfig,
		SecurityContainer:  securityContainerImpl,
		DebugPrintInjector: printSecurityInjector,
	}
	return defaultContainer, func() {
		cleanup2()
		cleanup()
	}, nil
}
