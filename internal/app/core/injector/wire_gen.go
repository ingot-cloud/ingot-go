// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injector

import (
	"github.com/ingot-cloud/ingot-go/internal/app/api"
	"github.com/ingot-cloud/ingot-go/internal/app/config"
	"github.com/ingot-cloud/ingot-go/internal/app/core/provider"
	"github.com/ingot-cloud/ingot-go/internal/app/model/dao"
	"github.com/ingot-cloud/ingot-go/internal/app/router"
	"github.com/ingot-cloud/ingot-go/internal/app/service"
	"github.com/ingot-cloud/ingot-go/pkg/framework/boot/container"
)

// Injectors from wire.go:

func BuildConfiguration(options *config.Options) (*config.Config, error) {
	configConfig, err := provider.LoadConfig(options)
	if err != nil {
		return nil, err
	}
	return configConfig, nil
}

func BuildContainer(config2 *config.Config, options *config.Options) (*container.Container, func(), error) {
	authentication, cleanup, err := provider.BuildAuthentication(config2)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := provider.BuildGorm(config2)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := &dao.Role{
		DB: db,
	}
	roleAuthority := &dao.RoleAuthority{
		DB: db,
	}
	authority := &dao.Authority{
		DB: db,
	}
	user := &dao.User{
		DB: db,
	}
	roleUser := &dao.RoleUser{
		DB: db,
	}
	permission := &service.Permission{
		RoleDao:          role,
		RoleAuthorityDao: roleAuthority,
		AuthorityDao:     authority,
		UserDao:          user,
		RoleUserDao:      roleUser,
	}
	casbinAdapter := &provider.CasbinAdapter{
		PermissionService: permission,
	}
	syncedEnforcer, cleanup3, err := provider.BuildCasbin(options, casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	encoder, cleanup4, err := provider.BuildPasswordEncoder()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	auth := &service.Auth{
		UserDao:         user,
		RoleUserDao:     roleUser,
		RoleDao:         role,
		Auth:            authentication,
		PasswordEncoder: encoder,
	}
	apiAuth := &api.Auth{
		AuthService: auth,
	}
	serverConfig, err := provider.HTTPConfigSet(config2)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	configAuth, err := provider.AuthConfigSet(config2)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	routerRouter := &router.Router{
		Auth:           authentication,
		CasbinEnforcer: syncedEnforcer,
		AuthAPI:        apiAuth,
		HTTPConfig:     serverConfig,
		AuthConfig:     configAuth,
	}
	containerContainer := &container.Container{
		Router:     routerRouter,
		HTTPConfig: serverConfig,
	}
	return containerContainer, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
